#ifndef OSIC_OPERATIVE_CODE_H
#define OSIC_OPERATIVE_CODE_H

enum {
	OPERATIVE_CODE_HALT = 128,
	OPERATIVE_CODE_NOP = 0,

	OPERATIVE_CODE_ADD,
	OPERATIVE_CODE_SUB,
	OPERATIVE_CODE_MUL,
	OPERATIVE_CODE_DIV,
	OPERATIVE_CODE_MOD,
	OPERATIVE_CODE_POS,
	OPERATIVE_CODE_NEG,
	OPERATIVE_CODE_SHL,
	OPERATIVE_CODE_SHR,

	OPERATIVE_CODE_LT,
	OPERATIVE_CODE_LE,
	OPERATIVE_CODE_GT,
	OPERATIVE_CODE_GE,
	OPERATIVE_CODE_EQ,
	OPERATIVE_CODE_NE,
	OPERATIVE_CODE_IN,

        /* Bitwise Operators*/
	OPERATIVE_CODE_BOR,
	OPERATIVE_CODE_BXOR,
	OPERATIVE_CODE_BAND,
	OPERATIVE_CODE_BNOT,
	OPERATIVE_CODE_LNOT,

	OPERATIVE_CODE_POP,
	OPERATIVE_CODE_DUP,
	OPERATIVE_CODE_SWAP,
	OPERATIVE_CODE_LOAD,
	OPERATIVE_CODE_STORE,
	OPERATIVE_CODE_CONST,
	OPERATIVE_CODE_UNPACK,

	OPERATIVE_CODE_ADDITEM,
	OPERATIVE_CODE_GETITEM,
	OPERATIVE_CODE_SETITEM,
	OPERATIVE_CODE_DELITEM,

	OPERATIVE_CODE_ADDATTR,
	OPERATIVE_CODE_GETATTR,
	OPERATIVE_CODE_SETATTR,
	OPERATIVE_CODE_DELATTR,

	OPERATIVE_CODE_ADDSLICE,
	OPERATIVE_CODE_GETSLICE,
	OPERATIVE_CODE_SETSLICE,
	OPERATIVE_CODE_DELSLICE,

	OPERATIVE_CODE_ADDGETTER,
	OPERATIVE_CODE_GETGETTER,
	OPERATIVE_CODE_SETGETTER,
	OPERATIVE_CODE_DELGETTER,

	OPERATIVE_CODE_ADDSETTER,
	OPERATIVE_CODE_GETSETTER,
	OPERATIVE_CODE_SETSETTER,
	OPERATIVE_CODE_DELSETTER,

	OPERATIVE_CODE_JZ,
	OPERATIVE_CODE_JNZ,
	OPERATIVE_CODE_JMP,

	OPERATIVE_CODE_ARRAY,
	OPERATIVE_CODE_DICTIONARY,

	OPERATIVE_CODE_DEFINE,
	OPERATIVE_CODE_KARG,
	OPERATIVE_CODE_VARG,
	OPERATIVE_CODE_VKARG,
	OPERATIVE_CODE_CALL,
	OPERATIVE_CODE_TAILCALL,
	OPERATIVE_CODE_RETURN,

	OPERATIVE_CODE_SELF,
	OPERATIVE_CODE_SUPER,
	OPERATIVE_CODE_CLASS,
	OPERATIVE_CODE_MODULE,

	OPERATIVE_CODE_TRY,
	OPERATIVE_CODE_UNTRY,
	OPERATIVE_CODE_THROW,
	OPERATIVE_CODE_LOADEXC
};

int
operat_code_to_method(int operative_code);

#endif /* osic_OPERATIVE_CODE_H */
